diff --git a/src/google/protobuf/BUILD.bazel b/src/google/protobuf/BUILD.bazel
index 381e0e24e..9e682e77d 100644
--- a/src/google/protobuf/BUILD.bazel
+++ b/src/google/protobuf/BUILD.bazel
@@ -556,6 +556,7 @@ cc_library(
         "@com_google_absl//absl/types:span",
         "@com_google_absl//absl/utility:if_constexpr",
     ],
+    alwayslink = 1,
 )
 
 PROTOBUF_HEADERS = [
@@ -657,6 +658,7 @@ cc_library(
         "@com_google_absl//absl/types:span",
         "@com_google_absl//absl/types:variant",
     ],
+    alwayslink = 1,
 )
 
 # This target exposes the headers for the protobuf runtime, and additionally
diff --git a/src/google/protobuf/io/gzip_stream.h b/src/google/protobuf/io/gzip_stream.h
index 1644949fa..6fc58972c 100644
--- a/src/google/protobuf/io/gzip_stream.h
+++ b/src/google/protobuf/io/gzip_stream.h
@@ -23,11 +23,14 @@
 #include "google/protobuf/stubs/common.h"
 #include "google/protobuf/io/zero_copy_stream.h"
 #include "google/protobuf/port.h"
-#include <zlib.h>
 
 // Must be included last.
 #include "google/protobuf/port_def.inc"
 
+#if HAVE_ZLIB
+#include <zlib.h>
+#endif  // HAVE_ZLIB
+
 namespace google {
 namespace protobuf {
 namespace io {
@@ -55,8 +58,10 @@ class PROTOBUF_EXPORT GzipInputStream final : public ZeroCopyInputStream {
   ~GzipInputStream() override;
 
   // Return last error message or NULL if no error.
+  #if HAVE_ZLIB
   inline const char* ZlibErrorMessage() const { return zcontext_.msg; }
   inline int ZlibErrorCode() const { return zerror_; }
+  #endif  // HAVE_ZLIB
 
   // implements ZeroCopyInputStream ----------------------------------
   bool Next(const void** data, int* size) override;
@@ -69,8 +74,10 @@ class PROTOBUF_EXPORT GzipInputStream final : public ZeroCopyInputStream {
 
   ZeroCopyInputStream* sub_stream_;
 
+  #if HAVE_ZLIB
   z_stream zcontext_;
   int zerror_;
+  #endif  // HAVE_ZLIB
 
   void* output_buffer_;
   void* output_position_;
@@ -122,8 +129,10 @@ class PROTOBUF_EXPORT GzipOutputStream final : public ZeroCopyOutputStream {
   ~GzipOutputStream() override;
 
   // Return last error message or NULL if no error.
+  #if HAVE_ZLIB
   inline const char* ZlibErrorMessage() const { return zcontext_.msg; }
   inline int ZlibErrorCode() const { return zerror_; }
+  #endif  // HAVE_ZLIB
 
   // Flushes data written so far to zipped data in the underlying stream.
   // It is the caller's responsibility to flush the underlying stream if
@@ -156,8 +165,10 @@ class PROTOBUF_EXPORT GzipOutputStream final : public ZeroCopyOutputStream {
   void* sub_data_;
   int sub_data_size_;
 
+  #if HAVE_ZLIB
   z_stream zcontext_;
   int zerror_;
+  #endif // HAVE_ZLIB
   void* input_buffer_;
   size_t input_buffer_length_;
 
